{"ast":null,"code":"import Axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\n\nfunction authenticate(credentials) {\n  return Axios.post(\"http://localhost:8000/api/login_check\", credentials).then(response => response.data.token).then(token => {\n    // mettre le token dans le localStorage\n    window.localStorage.setItem(\"authToken\", token); // ajouter à axios pour chaque req, le bearer token avec le token récup\n\n    Axios.defaults.headers[\"Authorization\"] = \"Bearer \" + token;\n    return true;\n  });\n}\n\nfunction logout() {\n  window.localStorage.removeItem(\"authToken\");\n  delete Axios.defaults.headers[\"Authorization\"];\n}\n\nfunction setup() {\n  // voir si on a un token\n  const token = window.localStorage.getItem('authToken');\n\n  if (token) {\n    const jwtData = jwtDecode(token); // millisecondes vs secondes\n\n    if (jwtData.exp * 1000 > new Date().getTime()) {\n      Axios.defaults.headers[\"Authorization\"] = \"Bearer \" + token;\n    }\n  }\n}\n\nfunction isAuthenticated() {\n  const token = window.localStorage.getItem(\"authToken\");\n\n  if (token) {\n    const jwtData = jwtDecode(token);\n\n    if (jwtData.exp * 1000 > new Date().getTime()) {\n      return true; // ok\n    }\n\n    return false; // token expiré\n  }\n\n  return false; // pas de token\n}\n\nexport default {\n  authenticate: authenticate,\n  logout: logout,\n  setup: setup,\n  isAuthenticated: isAuthenticated\n};","map":{"version":3,"sources":["/Volumes/T7 Touch/PHP/API2022/reactapi2022/src/services/authAPI.js"],"names":["Axios","jwtDecode","authenticate","credentials","post","then","response","data","token","window","localStorage","setItem","defaults","headers","logout","removeItem","setup","getItem","jwtData","exp","Date","getTime","isAuthenticated"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,YAAT,CAAsBC,WAAtB,EAAkC;AAC9B,SAAOH,KAAK,CACHI,IADF,CACO,uCADP,EACgDD,WADhD,EAEEE,IAFF,CAEOC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAcC,KAFjC,EAGEH,IAHF,CAGOG,KAAK,IAAI;AACX;AACAC,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,WAA5B,EAAyCH,KAAzC,EAFW,CAGX;;AACAR,IAAAA,KAAK,CAACY,QAAN,CAAeC,OAAf,CAAuB,eAAvB,IAAwC,YAAYL,KAApD;AACA,WAAO,IAAP;AACH,GATF,CAAP;AAUH;;AAED,SAASM,MAAT,GAAiB;AACbL,EAAAA,MAAM,CAACC,YAAP,CAAoBK,UAApB,CAA+B,WAA/B;AACA,SAAOf,KAAK,CAACY,QAAN,CAAeC,OAAf,CAAuB,eAAvB,CAAP;AACH;;AAED,SAASG,KAAT,GAAgB;AACZ;AACA,QAAMR,KAAK,GAAGC,MAAM,CAACC,YAAP,CAAoBO,OAApB,CAA4B,WAA5B,CAAd;;AACA,MAAGT,KAAH,EACA;AACI,UAAMU,OAAO,GAAGjB,SAAS,CAACO,KAAD,CAAzB,CADJ,CAEI;;AACA,QAAIU,OAAO,CAACC,GAAR,GAAc,IAAf,GAAuB,IAAIC,IAAJ,GAAWC,OAAX,EAA1B,EAA+C;AAC3CrB,MAAAA,KAAK,CAACY,QAAN,CAAeC,OAAf,CAAuB,eAAvB,IAAwC,YAAYL,KAApD;AACH;AACJ;AACJ;;AAED,SAASc,eAAT,GAA2B;AACvB,QAAMd,KAAK,GAAGC,MAAM,CAACC,YAAP,CAAoBO,OAApB,CAA4B,WAA5B,CAAd;;AACA,MAAGT,KAAH,EAAS;AACL,UAAMU,OAAO,GAAGjB,SAAS,CAACO,KAAD,CAAzB;;AACA,QAAIU,OAAO,CAACC,GAAR,GAAa,IAAd,GAAsB,IAAIC,IAAJ,GAAWC,OAAX,EAAzB,EACA;AACI,aAAO,IAAP,CADJ,CACgB;AACf;;AACD,WAAO,KAAP,CANK,CAMQ;AAChB;;AAED,SAAO,KAAP,CAXuB,CAWV;AAChB;;AAED,eAAe;AACXnB,EAAAA,YAAY,EAAEA,YADH;AAEXY,EAAAA,MAAM,EAAEA,MAFG;AAGXE,EAAAA,KAAK,EAAEA,KAHI;AAIXM,EAAAA,eAAe,EAAEA;AAJN,CAAf","sourcesContent":["import Axios from \"axios\"\nimport jwtDecode from \"jwt-decode\"\n\nfunction authenticate(credentials){\n    return Axios\n            .post(\"http://localhost:8000/api/login_check\", credentials)\n            .then(response => response.data.token)\n            .then(token => {\n                // mettre le token dans le localStorage\n                window.localStorage.setItem(\"authToken\", token)\n                // ajouter à axios pour chaque req, le bearer token avec le token récup\n                Axios.defaults.headers[\"Authorization\"]=\"Bearer \" + token\n                return true\n            })\n}\n\nfunction logout(){\n    window.localStorage.removeItem(\"authToken\")\n    delete Axios.defaults.headers[\"Authorization\"]\n}\n\nfunction setup(){\n    // voir si on a un token\n    const token = window.localStorage.getItem('authToken')\n    if(token)\n    {\n        const jwtData = jwtDecode(token)\n        // millisecondes vs secondes\n        if((jwtData.exp * 1000) > new Date().getTime()){\n            Axios.defaults.headers[\"Authorization\"]=\"Bearer \" + token\n        }\n    }\n}\n\nfunction isAuthenticated() {\n    const token = window.localStorage.getItem(\"authToken\")\n    if(token){\n        const jwtData = jwtDecode(token)\n        if((jwtData.exp *1000) > new Date().getTime())\n        {\n            return true // ok\n        }\n        return false // token expiré\n    }\n\n    return false // pas de token\n}\n\nexport default {\n    authenticate: authenticate,\n    logout: logout,\n    setup: setup,\n    isAuthenticated: isAuthenticated\n}"]},"metadata":{},"sourceType":"module"}